npm install @xname-ui/core
xname에 ## ARK Management System
같은 Readme.md 에 있는 파일명을 쓰면
해당 파일의 설명을 웹 페이지 UI에 띄워준다.

- 몽고DB 연동 순서 -

몽고 DB를 설치하고
1. npm i -g mongoose를 package.json이 있는 폴더에 설치한다.

서버를 실행시키는 JS파일안에 
몽구스(몽고DB와 서버단을 연결시켜주는 모듈)을 import한다.
const mongoose = require('mongoose');

몽구스를 이용해 몽고DB와 서버를 연결하는 구문을 짠다.
const db = mongoose.connection;
db.on('error', console.error);
db.once('open', function(){
    // CONNECTED TO MONGODB SERVER
    console.log("Connected to mongod server");
});

mongoose.connect('mongodb://root:tmdcks2416@localhost:27017/admin');
몽고DB서버의 주소를 적어 어느db와 커넥트 할건지 명시해준다.

node server.js 명령어를 쳤을 때,
Connected to mongod server 이 잘 출력되면 성공이다.

mongo로 몽고디비를 실행하기전에는 
C:\Program Files\MongoDB\Server\4.4\bin 경로의
mongod 파일을 열어 db의 데이터를 저장할 폴더를 지정해줘야하고
mongod --dbpath C:\data\db 를 통해서 실행해야만 데이터관리자 권한이 부여된다.
mongod을 이런식으로 실행한 후,
mongo를 실행하고 몽고DB관련 명령어를 치면 모두 잘 먹는다.

유저를 등록을 안해놓으면 unauthrization 오류가 뜰수있음
DB 생성후에 꼭 등록 후, 유저 개인정보에 호스트 유저로 저장
db.createUser({
"user" : "scarlet",
"pwd" : "tmdcks2416",
roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
})

user.연결하고자하는 DB명
해당 DB의 user 컬렉션(테이블)에 도큐먼트(컬럼) 추가
db.User.save({ name: 'slima', id: "fu01233", nickname: "안녕", email: "fu017@naver.com"});
db.User.save({ name: 2212222, id: "fu021233233", nickname: "안345녕", email: "fu010@naver.com"});

<Mongoose, MongoDB ODM(Object Document Mapping)>
- 객체와 문서를 1대1 매칭시켜준다.
- Object는 자바스크립트의 객체이고, Document는 몽고DB의 문서이다.
- 즉, 문서를 DB에서 조회할 때 자바스크립트 객체로 바꿔주는 역할이다.

- 몽구스의 장점을 꼽자면 강제 스키마(schema)의 부활
,populate, 프로미스와 콜백 사용 가능, 편리한 쿼리 빌더 등을 꼽을 수 있다.
프로미스와 콜백을 자유자재로 전환할 수 있다는 것은 정말 편리하다. 
노드는 지금 프로미스가 거의 공식 비동기 API처럼 되어있다. 
기본 몽고DB가 콜백 기반이기 때문에 프로미스를 사용할 수 있게 해주는 몽구스가 잘맞는다.
몽구스의 쿼리는 간결한 느낌이다. 제공하는 쿼리 빌더로 손쉽게 쿼리를 만들어준다. 
마치 자바스크립트의 API를 제이쿼리가 편리하게 압축시킨 것 처럼

- 몽구스는 다큐먼트에 아무거나 넣어도 에러가 생기지 않는다.
MySQL같은 SQL들은 전부 초기설정으로 자료형이나 타입, 사이즈 등의 조건들을 정해놓고
시작하기때문에 필터링을 거치므로 조건과 맞지않으면 데이터가 들어가지 않게되지만
몽고DB와같은 noSQL들은 기본적으로 아무거나 넣어도 에러가 생기지 않고 조건을 정해놓지
않는것이 특징이라 이러한 문제를 막기 위해 몽구스는 Schema(스키마)를 도입했다.
몽구스는 사용자가 작성한 스키마를 기준으로 데이터를 DB에 넣기 전에 먼저 검사한다.
스키마에 어긋나는 데이터가 있으면 에러를 발생시킨다.
즉, 테이블과 어느 정도 비슷한 역할을 한다. 
또한 스키마를 설정할 때 인덱스까지 같이 걸어둘 수도 있다. 
기본값도 설정해줄 수 있다.
구조에 관한 편의 기능들을 하나로 모아두었다고 생각하면 된다.

위와 같이 타입을 고정해주는 것만으로도 좋지만 
추가적으로 여러 편의 기능도 제공해준다. 
많이 쓰이는 세 가지 기능을 알아보겠습니다. 
먼저 virtual입니다. 다큐먼트에는 없지만 
객체에는 있는 가상의 필드를 만들어준다.



<리액트>

만든 컴포넌트를 다른 JS파일에서 참조하기 위해선 꼭
export default 컴포넌트명; 을 해줘야한다.








